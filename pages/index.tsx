import Head from "next/head";
import { useEffect, useRef, useState } from "react";

const OPEN_AI_TOKEN = "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";

export default function Home() {
  const SpeechRecognition = useRef<any>(null);
  const SpeechGrammarList = useRef<any>(null);
  const SpeechRecognitionEvent = useRef<any>(null);
  const SpeechSynthesis = useRef<any>(null);
  const [talking, setTalking] = useState(false);
  // const started = useRef(false);
  const [messages, setMessages] = useState<
    Array<{ speaker: string; message: string }>
  >([{ speaker: "Human", message: "Say: Hey Watson" }]);
  const conversationHistory = useRef<Array<string>>([
    "Human: Hello, who are you?",
    "AI: I am an AI created by OpenAI. How can I help you today?",
  ]);
  const [result, setResult] = useState("");

  const startSpeechToText = () => {
    console.log("Start");

    const recognition = new SpeechRecognition.current();
    const speechRecognitionList = new SpeechGrammarList.current();

    recognition.start();

    recognition.onresult = (event: any) => {
      const text = event.results[0][0].transcript;
      console.log(text);
      // if (text.toLowerCase().includes("watson")) started.current = true;
      // if (started.current == false) return;
      setResult(text);
      handleAnswer(text);
    };
    recognition.onspeechstart = () => {
      setTalking(true);
    };

    recognition.onspeechend = () => {
      setTalking(false);
      recognition.stop();
      // if (started.current == false) startSpeechToText();
    };
  };

  const startTextToSpeech = (message: string) => {
    setTalking(true);
    const utterThis = new SpeechSynthesisUtterance(message);
    const syntesis = SpeechSynthesis.current;

    syntesis.speak(utterThis);

    utterThis.onend = () => {
      setTalking(false);
      startSpeechToText();
    };
  };

  const handleAnswer = async (message: string) => {
    const humanMessage = `Human: ${message}`;
    setMessages((m) => [...m, { speaker: "Human", message }]);
    const res = await getGPT3Answer(message);
    const answer: string = res.choices[0].text;
    const AIAnswer = `AI: ${answer}`;
    if (conversationHistory.current.length > 8)
      conversationHistory.current.splice(0, 2);
    conversationHistory.current.push(humanMessage, AIAnswer);

    setMessages((m) => [...m, { speaker: "AI", message: answer }]);

    startTextToSpeech(answer);
  };

  const getGPT3Answer = async (message: string) => {
    console.log("HISTORY ", conversationHistory);
    console.log(
      `The following is a conversation with an AI assistant that help to practice English. His name is Watson. The assistant is helpful, creative, clever, curious and very friendly. The assistant asks a lot of questions and likes to talk and likes to initiate conversation.\n${conversationHistory.current.join(
        "\n"
      )}\nHuman:${message}\n\nAI:`
    );
    return await fetch("https://api.openai.com/v1/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPEN_AI_TOKEN}`,
      },
      body: JSON.stringify({
        model: "text-davinci-002",
        prompt: `The following is a conversation with an AI assistant that help to practice English. The assistant is helpful, creative, clever, and very friendly. The assistant signal every mistake in the Human last message and correct to standard English. The assistant asking questions.\n${conversationHistory.current.join(
          "\n"
        )}\nHuman:${message}\n\nAI:`,
        temperature: 1,
        max_tokens: 100,
      }),
    }).then((r) => r.json());
  };

  const initState = () => {
    SpeechRecognition.current =
      //@ts-ignore
      window.SpeechRecognition || webkitSpeechRecognition;
    SpeechGrammarList.current =
      //@ts-ignore
      window.SpeechGrammarList || webkitSpeechGrammarList;
    SpeechRecognitionEvent.current =
      //@ts-ignore
      window.SpeechRecognitionEvent || webkitSpeechRecognitionEvent;
    //@ts-ignore
    SpeechSynthesis.current = window.speechSynthesis;
  };
  useEffect(() => {
    initState();
    // startSpeechToText();
    window.addEventListener("click", startSpeechToText);

    return () => window.removeEventListener("click", startSpeechToText);
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <div className="w-[200px] h-[200px] bg-pink-400 absolute blur-[200px] opacity-80" /> */}
      <div
        className={`w-[300px] h-[300px] bg-gradient-to-tr from-pink-400 to-blue-400 absolute blur-[200px] opacity-10 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transition-all ${
          talking ? "animate-pulse" : ""
        }`}
      />
      {/* <div className="w-[200px] h-[200px] bg-blue-400 absolute blur-[200px] opacity-80 right-32 bottom-32" /> */}
      <main
        className={`flex flex-col items-center justify-center h-screen ${
          messages[messages.length - 1].speaker == "Human" ? "opacity-50" : ""
        }`}
      >
        <div className="flex gap-2 items-center">
          <div
            className={`transition-all w-0.5 h-5 rounded-full bg-white ${
              talking ? "scale-y-1 animate-breave" : "scale-y-[.1]"
            }`}
          />
          <div
            className={`transition-all w-0.5 h-10 rounded-full bg-white ${
              talking
                ? "scale-y-1 animate-breave animation-delay-100"
                : "scale-y-[.05]"
            }`}
          />
          <div
            className={`transition-all w-0.5 h-5 rounded-full bg-white ${
              talking
                ? "scale-y-1 animate-breave animation-delay-200"
                : "scale-y-[.1]"
            }`}
          />
        </div>
        <span
          className={`font-space mt-4 ${
            messages[messages.length - 1].speaker == "Human"
              ? "text-opacity-50"
              : ""
          }`}
        >
          {messages[messages.length - 1].message}
        </span>
      </main>
    </div>
  );
}
